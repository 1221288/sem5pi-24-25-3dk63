@startuml US_3002_CD

class Server {
    - SERVER: String
    - LOCAL_SERVER: String
    - PORT: int
    + main(args: String[]): void
    - getOptionFromUser(scanner: Scanner): int
    - sendCommTest(dos: DataOutputStream): void
    - sendEmail(dos: DataOutputStream, scanner: Scanner): void
    - writeData(dos: DataOutputStream, data: String): void
    - sendAuth(dos: DataOutputStream, scanner: Scanner): void
    - sendListJobOpenings(dos: DataOutputStream, username: String): void
    - sendListApplications(dos: DataOutputStream, username: String): void
    - sendPrint(dos: DataOutputStream, scanner: Scanner): void
    - sendDisconn(dos: DataOutputStream): void
    - sendReceiveNotification(dos: DataOutputStream): void
    - receiveResponseACKorERR(dis: DataInputStream): void
    - receiveAuthResponse(dis: DataInputStream, dos: DataOutputStream): void
    - receiveJobOpenings(dis: DataInputStream): void
    - receiveApplications(dis: DataInputStream): void
    - receiveNotification(dis: DataInputStream): void
    - readData(dis: DataInputStream): String
}

class Client {
    - SERVER: String
    - LOCAL_SERVER: String
    - PORT: int
    + main(args: String[]): void
    - getOptionFromUser(scanner: Scanner): int
    - sendCommTest(dos: DataOutputStream): void
    - sendEmail(dos: DataOutputStream, scanner: Scanner): void
    - writeData(dos: DataOutputStream, data: String): void
    - sendAuth(dos: DataOutputStream, scanner: Scanner): void
    - sendListJobOpenings(dos: DataOutputStream, username: String): void
    - sendListApplications(dos: DataOutputStream, username: String): void
    - sendPrint(dos: DataOutputStream, scanner: Scanner): void
    - sendDisconn(dos: DataOutputStream): void
    - sendReceiveNotification(dos: DataOutputStream): void
    - receiveResponseACKorERR(dis: DataInputStream): void
    - receiveAuthResponse(dis: DataInputStream, dos: DataOutputStream): void
    - receiveJobOpenings(dis: DataInputStream): void
    - receiveApplications(dis: DataInputStream): void
    - receiveNotification(dis: DataInputStream): void
    - readData(dis: DataInputStream): String
}

class JobOffer {
    - id: Long
    - reference: Reference
    - function: Function
    - contractType: ContractType
    - mode: Mode
    - address: Address
    - nrOfVacancies: NumberOfVacancies
    - description: Description
    - requirements: JobRequirements
    - creationDate: JobOfferDate
    - managerEmail: String
    - company: Company
    - isRanked: boolean
    - nextSequentialNumber: long
    + JobOffer(reference: Reference, function: Function, contractType: ContractType, mode: Mode, address: Address, company: Company, nrOfVacancies: NumberOfVacancies, description: Description, requirements: JobRequirements, managerEmail: String)
    + JobOffer()
    + sameAs(other: Object): boolean
    + generateReference(customerCode: String): Reference
    + getManagerEmail(): String
    + getFunction(): Function
    + getContractType(): ContractType
    + getMode(): Mode
    + getAddress(): Address
    + getCompany(): Company
    + getNrOfVacancies(): NumberOfVacancies
    + getDescription(): Description
    + getRequirements(): JobRequirements
    + getCreationDate(): JobOfferDate
    + getIsRanked(): boolean
    + toString(): String
    + identity(): Reference
    + replaceFunction(function: Function): void
    + replaceContractType(contractType: ContractType): void
    + replaceMode(mode: Mode): void
    + replaceAddress(address: Address): void
    + replaceNrOfVacancies(nrOfVacancies: NumberOfVacancies): void
    + replaceDescription(description: Description): void
    + replaceRequirements(requirements: JobRequirements): void
    + replaceCompany(company: Company): void
    + replaceIsRanked(isRanked: boolean): void
    + replaceReference(oldReference: Reference, customerCode: CustomerCode): Reference
}

class ListJobOpeningController {
    - customerRepository: CustomerRepository
    - jobOfferRepository: JobOfferRepository
    - authz: AuthorizationService
    - configurationRepository: ConfigurationRepository
    - companyRepository: CompanyRepository
    - ACTIVE_JOB_OPENINGS: String
    - ALL_JOB_OPENINGS: String
    - CUSTOMER_JOB_OPENINGS: String
    - DATE_JOB_OPENINGS: String
    + listJobOffers(option: String, companyName: String, day: LocalDateTime): Iterable<JobOffer>
    + filterThroughJobOpenings(jobOffers: List<JobOffer>, emailAddress: EmailAddress): List<JobOffer>
    + getActiveJobOpenings(jobOffers: List<JobOffer>): List<JobOffer>
    + listCustomerJobOpenings(username: Username): Iterable<JobOffer>
}

interface ConfigurationRepository {
    + findByReference(reference: Reference): Iterable<Configuration>
}

interface JobOfferRepository {
    + findAllByManager(managerEmail: String): Iterable<JobOffer>
    + findByReference(reference: Reference): Iterable<JobOffer>
    + findAllByCreationDate(creationDate: LocalDateTime): List<JobOffer>
    + findAllByCompany(company: Company): List<JobOffer>
}

class JpaConfigurationRepository {
    + JpaConfigurationRepository(autoTx: TransactionalContext)
    + JpaConfigurationRepository(puname: String)
    + findByReference(reference: Reference): Iterable<Configuration>
}

class JpaJobOfferRepository {
    + JpaJobOfferRepository(autoTx: TransactionalContext)
    + JpaJobOfferRepository(puname: String)
    + findAllByManager(managerEmail: String): Iterable<JobOffer>
    + findByReference(reference: Reference): Iterable<JobOffer>
    + findAllByCreationDate(creationDate: LocalDateTime): List<JobOffer>
    + findAllByCompany(company: Company): List<JobOffer>
}

Client --> Server : TCP Connection
Server --> ListJobOpeningController : Uses

Client ..> JobOffer : Uses
ListJobOpeningController --> JobOffer : Uses
ListJobOpeningController --> JobOfferRepository : Uses
ListJobOpeningController --> ConfigurationRepository : Uses
ConfigurationRepository --> JpaConfigurationRepository : Implements
JobOfferRepository --> JpaJobOfferRepository : Implements

@enduml
